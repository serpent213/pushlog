#!/usr/bin/env python3

from datetime import datetime, timedelta
from fuzzywuzzy import process
import click
import http.client
import os
import re
import systemd.journal
import threading
import time
import urllib
import yaml

from pprint import pprint

@click.command()
@click.option('--config', prompt='Path to configuration file',
              help='The YAML configuration file to apply.')
def main(config):
    with open(config, 'r') as yaml_file:
        values = yaml.safe_load(yaml_file)
        priorities = values.get('priorities', [])
        include_regexs = values.get('include', [])
        exclude_regexs = values.get('exclude', [])
        collect_timeout = values.get('collect-timeout', 5)
        deduplication_timeout = values.get('deduplication-timeout', 30)
        fuzzy_threshold = values.get('fuzzy-threshold', 90)
        pushover = values.get('pushover', {})
        
    j = systemd.journal.Reader()
    j.log_level(systemd.journal.LOG_INFO)
    j.this_boot()
    j.seek_tail()
    j.get_previous()
    # j.add_match(_SYSTEMD_UNIT='systemd-journald.service')

    entries_buffer = []
    history_buffer = {}
    last_collected_time = datetime.now()
    while True:
        if j.wait(1) == systemd.journal.APPEND:
            for entry in j:
                pprint(entry)
                if should_process_entry(entry, priorities, include_regexs, exclude_regexs, history_buffer):
                    message = entry['MESSAGE']

                    entries_buffer.append(message)
        
        if (datetime.now() - last_collected_time).total_seconds() >= collect_timeout:
            send_collected_messages(entries_buffer, pushover)
            entries_buffer = []
            last_collected_time = datetime.now()

            # Remove entries older than 30 minutes from the history buffer
            for message in list(history_buffer):
                if datetime.now() - history_buffer[message] > timedelta(minutes=deduplication_timeout):
                    del history_buffer[message]

def should_process_entry(entry, priorities, include_regexs, exclude_regexs, fuzzy_threshold, history_buffer):
    if not isinstance(entry, dict) or not 'PRIORITY' in entry or not entry['PRIORITY'] in priorities:
        return False
    message = entry.get('MESSAGE', '')
    for regex in exclude_regexs:
        if re.search(regex, message):
            return False
    include_match = False
    for regex in include_regexs:
        if re.search(regex, message):
            include_match = True
            break
    if not include_match:
        return False

    if fuzzy_threshold > 0:
        # Check against history buffer (fuzzy match), strip numbers first
        if getattr(should_process_entry, "translation_table", None) is None:
            # use the function object for a hacky singleton
            should_process_entry.translation_table = str.maketrans('', '', '0123456789')
        stripped = message.translate(should_process_entry.translation_table)

        matches = process.extract(stripped, list(history_buffer.keys()), limit=1)
        if len(matches) > 0:
            print(f"Fuzzywuzzy: {matches[0][1]}% ({stripped})")
        if len(matches) > 0 and matches[0][1] >= fuzzy_threshold:  # fuzzy matching threshold in %
            return False

        history_buffer[stripped] = datetime.now()

    # Pass
    return True

def send_collected_messages(entries_buffer, pushover):
    if entries_buffer:
        entry_text = '\n'.join(entries_buffer)
        send_pushover_notification(entry_text, pushover)

def send_pushover_notification(message, pushover):
    print("===message===")
    print(message)
    print("======")
    return
    conn = http.client.HTTPSConnection("api.pushover.net:443")
    conn.request("POST", "/1/messages.json",
                 urllib.parse.urlencode({
                     "token": pushover.get('API Key'),
                     "user": pushover.get('User Key'),
                     "message": message,
                 }), {"Content-type": "application/x-www-form-urlencoded"})
    conn.getresponse()

if __name__ == '__main__':
    main()
