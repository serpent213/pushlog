#!/usr/bin/env python3

from datetime import datetime, timedelta
from fuzzywuzzy import process
import click
import http.client
import os
import re
import systemd.journal
import threading
import time
import urllib
import yaml

@click.command()
@click.option('--config', prompt='Path to configuration file',
              help='The YAML configuration file to apply.')
def main(config):
    with open(config, 'r') as yaml_file:
        values = yaml.safe_load(yaml_file)
        priorities = values.get('priorities', [])
        include_regexs = values.get('include', [])
        exclude_regexs = values.get('exclude', [])
        collect_timeout = values.get('collect-timeout', 0)
        pushover = values.get('pushover', {})
        
    j = systemd.journal.Reader()
    j.log_level(systemd.journal.LOG_INFO)
    j.this_boot()
    # j.add_match(_SYSTEMD_UNIT='systemd-journald.service')

    entries_buffer = []
    history_buffer = {}
    timer = None
    while True:
        if j.wait() == systemd.journal.APPEND:
            for entry in j:
                if should_process_entry(entry, priorities, include_regexs, exclude_regexs, history_buffer):
                    message = entry['MESSAGE']

                    entries_buffer.append(message)
                    history_buffer[message] = datetime.now()

                    if timer is None or not timer.is_alive():
                        timer = threading.Timer(collect_timeout, send_collected_messages, args=[entries_buffer, pushover])
                        timer.start()

            # Remove entries older than 30 minutes from the history buffer
            for message in list(history_buffer):
                if datetime.now() - history_buffer[message] > timedelta(minutes=30):
                    del history_buffer[message]

def should_process_entry(entry, priorities, include_regexs, exclude_regexs, history_buffer):
    if not isinstance(entry, dict) or not 'PRIORITY' in entry or not entry['PRIORITY'] in priorities:
        return False
    message = entry.get('MESSAGE', '')
    for regex in exclude_regexs:
        if re.search(regex, message):
            return False
    include_match = False
    for regex in include_regexs:
        if re.search(regex, message):
            include_match = True
            break
    if not include_match:
        return False

    # Check against history buffer and discard duplicates (fuzzy match)
    matches = process.extract(message, list(history_buffer.keys()), limit=1)
    if len(matches) > 0:
        print(f"Fuzzywuzzy: {matches[0][1]}% ({message})")
    if len(matches) > 0 and matches[0][1] >= 80:  # fuzzy matching threshold in %
        return False

    # Pass
    return True

def send_collected_messages(entries_buffer, pushover):
    if entries_buffer:
        entry_text = '\n'.join(entries_buffer)
        send_pushover_notification(entry_text, pushover)
    del entries_buffer[:]

def send_pushover_notification(message, pushover):
    print("===message===")
    print(message)
    print("======")
    return
    conn = http.client.HTTPSConnection("api.pushover.net:443")
    conn.request("POST", "/1/messages.json",
                 urllib.parse.urlencode({
                     "token": pushover.get('API Key'),
                     "user": pushover.get('User Key'),
                     "message": message,
                 }), {"Content-type": "application/x-www-form-urlencoded"})
    conn.getresponse()

if __name__ == '__main__':
    main()
